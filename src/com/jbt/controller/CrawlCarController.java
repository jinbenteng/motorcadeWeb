package com.jbt.controller;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.jbt.bean.CarInfo;import com.jbt.bean.CrawlCarInfo;import com.jbt.bean.CrawlInfo;import com.jbt.bean.CrawlWarnInfo;import com.jbt.bean.ManagerInfo;import com.jbt.bean.WarnInfo;import com.jbt.service.CarInfoService;import com.jbt.service.CrawlCarInfoService;import com.jbt.service.CrawlInfoService;import com.jbt.service.CrawlWarnInfoService;import com.jbt.service.ManagerInfoService;import com.jbt.service.SectorInfoService;import com.jbt.service.WarnInfoService;import com.jbt.util.DateUtil;import com.jbt.util.Page;import com.jbt.util.SessionUtil;@Controllerpublic class CrawlCarController {	private final Logger log = LoggerFactory			.getLogger(CrawlCarController.class);	@Resource	private CrawlCarInfoService crawlCarInfoService;	@Resource	private CrawlInfoService crawlInfoService;	@Resource	private CrawlWarnInfoService crawlWarnInfoService;	@Resource	private CarInfoService carInfoService;	@Resource	private ManagerInfoService managerService;	@Resource	private SectorInfoService sectorService;	@Resource	private WarnInfoService warnService;	// 添加围栏	@RequestMapping(value = "/crawlcar_add")	public String crawlcar_add(HttpServletRequest request, String str,			Model model) {		try {			System.out.println(str);			JSONObject jobj = JSONObject.fromObject(str);			String crawlName = jobj.getString("crawlName");			CrawlInfo crawlInfo = new CrawlInfo();			crawlInfo.setCrawlname(crawlName);			crawlInfo.setState(0);			ManagerInfo manager = managerService.selectByName((String) request					.getSession().getAttribute("username"));			crawlInfo.setManager(manager);			crawlInfo.setCreattime(DateUtil					.getCurrentDate(DateUtil.DATE_FORMAT_3));			try {				crawlInfoService.insert(crawlInfo);			} catch (Exception e) {				e.printStackTrace();				model.addAttribute("msg", "该围栏已存在");				model.addAttribute("sectorDataWithCar", sectorService						.getTreeDataWithCar().toString());				return "set-Electronic";			}			JSONArray jArray = jobj.getJSONArray("data");			for (int i = 0; i < jArray.size(); i++) {				JSONObject json = jArray.getJSONObject(i);				CrawlWarnInfo crawlWarnInfo = new CrawlWarnInfo();				crawlWarnInfo.setState(0);				crawlWarnInfo.setCrawlname(crawlName);				crawlWarnInfo.setCharttype(json.getInt("chartType"));				crawlWarnInfo.setCirclepoint(json.getString("circlePoint"));				crawlWarnInfo.setCircleradius(json.getString("circleRadius"));				crawlWarnInfo.setCrawlinfo(crawlInfo);				int warnType = Integer.parseInt(json.getString("warnType"));				crawlWarnInfo.setWarntype(warnType);				crawlWarnInfo.setValiditystart(json.getString("startTime"));				crawlWarnInfo.setValidityend(json.getString("endTime"));				switch (warnType) {				case 3:					crawlWarnInfo.setIdletime(Integer.parseInt(json							.getString("idleTime")));					break;				case 4: {					crawlWarnInfo.setParktime(Integer.parseInt(json							.getString("parkTime")));				}					break;				case 5: {					crawlWarnInfo.setIdletime(Integer.parseInt(json							.getString("idleTime")));					crawlWarnInfo.setParktime(Integer.parseInt(json							.getString("parkTime")));				}					break;				default:					break;				}				try {					crawlWarnInfoService.insert(crawlWarnInfo);				} catch (Exception e) {					e.printStackTrace();					model.addAttribute("msg", "报警添加失败");					model.addAttribute("sectorDataWithCar", sectorService							.getTreeDataWithCar().toString());					return "set-Electronic";				}				String snList = json.getString("sn");				String[] sn;				if (!"".equals(snList)) {					sn = snList.split(",");					List<CarInfo> carList = carInfoService.searchBySn(sn);					if (carList != null && carList.size() > 0) {						Iterator<CarInfo> it = carList.iterator();						while (it.hasNext()) {							CarInfo car = it.next();							CrawlCarInfo crawlCarInfo = crawlCarInfoService									.searchBySnAndCrawlName(car.getSn(),											manager.getUsername());							// 如果围栏下该设备存在,则修改该条信息							if (crawlCarInfo != null) {								crawlCarInfo.setCrawlwarnid(crawlCarInfo										.getCrawlwarnid()										+ ","										+ crawlWarnInfo.getId());								try {									crawlCarInfoService											.updateByPrimaryKey(crawlCarInfo);								} catch (Exception e) {									e.printStackTrace();									model.addAttribute("msg", "报警车辆添加失败");									model.addAttribute("sectorDataWithCar",											sectorService.getTreeDataWithCar()													.toString());									return "set-Electronic";								}							} else {								crawlCarInfo = new CrawlCarInfo();								// crawlCarInfo.setCrawlname(crawlName);								crawlCarInfo.setCarid(car);								crawlCarInfo.setSn(car.getSn());								crawlCarInfo.setState(0);								crawlCarInfo.setCrawlwarnid(String										.valueOf(crawlWarnInfo.getId()));								crawlCarInfo										.setAddtime(DateUtil												.getCurrentDate(DateUtil.DATE_FORMAT_3));								crawlCarInfo										.setManagerid(manager.getUsername());								try {									crawlCarInfoService.insert(crawlCarInfo);								} catch (Exception e) {									e.printStackTrace();									model.addAttribute("msg", "报警车辆添加失败");									model.addAttribute("sectorDataWithCar",											sectorService.getTreeDataWithCar()													.toString());									return "set-Electronic";								}							}						}					}				}			}		} catch (Exception e) {			e.printStackTrace();			model.addAttribute("sectorDataWithCar", sectorService					.getTreeDataWithCar().toString());			model.addAttribute("msg", "系统出现问题");			return "set-Electronic";		}		model.addAttribute("sectorDataWithCar", sectorService				.getTreeDataWithCar().toString());		model.addAttribute("msg", "围栏添加成功");		return "set-Electronic";	}	@ResponseBody	@RequestMapping(value = "/crawl_warn", produces = {"application/json;charset=UTF-8"})	public String crawl_warn(HttpServletRequest request, String sn, String crawlwarnType) {		WarnInfo warn = new WarnInfo();		warn.setSn(sn);		warn.setWarntype(Integer.parseInt(crawlwarnType));		warn.setCreatedate(DateUtil.getCurrentDate(DateUtil.DATE_FORMAT_3));		try {			warnService.insert(warn);		} catch (Exception e) {			e.printStackTrace();		}			String manager = (String) request.getSession().getAttribute("username");		//Page page = warnService.searchByManager(manager, pageNow)				return null;	}	// 根据围栏名称和围栏报警类型查询限制车辆	@ResponseBody	@RequestMapping(value = "/crawlcar_car", produces = { "application/json;charset=UTF-8" })	public String crawlcar_car(String crawlName, Integer crawlwarnType) {		JSONArray jsonArr = new JSONArray();		JSONObject jdata = null;		List<Map<?, ?>> carList = crawlCarInfoService.searchCarByNameAndType(				crawlName, crawlwarnType);		if (carList != null && carList.size() > 0) {		}		return jsonArr.toString();	}	// 获取所有部门与车辆	@RequestMapping(value = "/crawl_allwithcar")	public String crawl_allwithcar(Model model,Integer pageNow,CrawlInfo crawlinfo) {		//JSONArray crawlArray = new JSONArray();		model.addAttribute("sectorDataWithCar", sectorService				.getTreeDataWithCar().toString());//		Page crawlPage = crawlInfoService.getCrawlList(crawlinfo, pageNow);//		int id = SessionUtil.getManagerId();//		List<Map<?, ?>> crawlList = crawlCarInfoService.searchCrawlByManager(crawlinfo,id);//		if(!crawlList.isEmpty())//			crawlArray = JSONArray.fromObject(crawlList);		return "set-Electronic";	}}