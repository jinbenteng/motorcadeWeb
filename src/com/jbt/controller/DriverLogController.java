package com.jbt.controller;import java.util.List;import java.util.Map;import javax.annotation.Resource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import com.jbt.bean.DriveLogInfo;import com.jbt.service.CarMsgInfoService;import com.jbt.service.DriverLogService;import com.jbt.service.SectorInfoService;import com.jbt.util.MapUtil;@Controllerpublic class DriverLogController {	@Resource	private DriverLogService driverLogService;	@Resource	private CarMsgInfoService carMsgService;	@Resource	private SectorInfoService sectorService;		/**	 * 行驶记录查询	 * @param id	 * @return	 */	@ResponseBody	@RequestMapping(value="/driver_log", produces = {"application/json;charset=UTF-8"})	public JSONObject driver_log(@RequestParam (required=false) int id){		JSONObject jobj = new JSONObject();		DriveLogInfo drivelog = driverLogService.selectByPrimaryKey(id);		String sn = drivelog.getSn();		String startTime = drivelog.getDeparturetime();  //起始时间		String endTime = drivelog.getArrivetime();		//终止时间		String timer = startTime+"~"+endTime;  //起始时间至终止时间		String totalMilege = String.valueOf(drivelog.getTotalmileage()==null ? 0 :drivelog.getTotalmileage());//String.valueOf(MapUtil.bumberDouble(drivelog.getTotalmileage()==null ? 0f :drivelog.getTotalmileage()));   //总行驶里程		String averageSpeed = String.valueOf(drivelog.getAveragespeed() == null ? 0 : drivelog.getAveragespeed());//String.valueOf(MapUtil.bumberDouble(drivelog.getAveragespeed() == null ? 0f : drivelog.getAveragespeed()));  //平均车速		String fuelconsumption = String.valueOf(drivelog.getInstantaneousfuel() == null ? 0 :drivelog.getInstantaneousfuel());//MapUtil.bumberDouble(drivelog.getInstantaneousfuel()==null ? 0f : drivelog.getInstantaneousfuel());  //瞬时油耗		String hundredFuel = String.valueOf(drivelog.getHundredkmfuel() == null ? 0 : drivelog.getHundredkmfuel());//MapUtil.bumberDouble(drivelog.getHundredkmfuel() > 30 ? 30 : drivelog.getHundredkmfuel());  //百公里油耗		String timeConsum = String.valueOf(MapUtil.getParamTime(drivelog.getTotalraveltime() == null ? 0 : drivelog.getTotalraveltime()));//MapUtil.getParamTime(drivelog.getTotalraveltime()==null ? 0 : drivelog.getTotalraveltime());   //总时间		String nRapiddeceleration = String.valueOf(drivelog.getRapiddecelerationtimes() == null ? 0 : drivelog.getRapiddecelerationtimes());//drivelog.getRapiddecelerationtimes() == null ? 0 : drivelog.getRapiddecelerationtimes();  //急减速次数		String nHardacceleration = String.valueOf(drivelog.getHardaccelerationtimes() == null ? 0 : drivelog.getHardaccelerationtimes());//drivelog.getHardaccelerationtimes()==null ? 0 : drivelog.getHardaccelerationtimes();  //急加速次数		String nIdlelong = String.valueOf(drivelog.getIdlelong() == null ? 0 : drivelog.getIdlelong());//drivelog.getIdlelong()==null ? 0 : drivelog.getIdlelong();  //怠速时长		String maxspeed = String.valueOf(drivelog.getMaxspeed() == null ? 0 :drivelog.getMaxspeed());		String maxvelocity = String.valueOf(drivelog.getMaxvelocity() == null ? 0 : drivelog.getMaxvelocity());		jobj.put("timer", timer);		jobj.put("totalMilege", totalMilege);		jobj.put("averageSpeed", averageSpeed);		jobj.put("fuelconsumption", fuelconsumption);		jobj.put("hundredFuel", hundredFuel);		jobj.put("timeConsum", timeConsum);		jobj.put("nRapiddeceleration", nRapiddeceleration);		jobj.put("nHardacceleration", nHardacceleration);		jobj.put("nIdlelong", nIdlelong);		jobj.put("maxspeed", maxspeed);		jobj.put("maxvelocity", maxvelocity);				//查询该设备这个时间段内行驶轨迹		List<Map<?, ?>> datalist = carMsgService.searchPeriodWay(sn, startTime, endTime);		if(datalist != null && datalist.size() > 0)		{			JSONArray jArray = JSONArray.fromObject(datalist);			jobj.put("values", jArray.toString());			jobj.put("COUNT", datalist.size());		}		else		{			jobj.put("values", "");			jobj.put("COUNT", 0);		}						return jobj;		}	@RequestMapping(value = "/sector_allwithcar")	public String sector_allwithcar(Model model,@RequestParam(required=false) int sectorId)	{		model.addAttribute("sectorDataWithCar",sectorService.getTreeDataWithCar().toString());		model.addAttribute("sectorId", sectorId);		return "manage-Monitor";			}}