package com.jbt.servlet;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import java.util.Timer;import java.util.TimerTask;import javax.servlet.http.HttpSession;import javax.websocket.EndpointConfig;import javax.websocket.OnClose;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.Session;import javax.websocket.server.ServerEndpoint;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.springframework.web.context.ContextLoader;import com.jbt.bean.CrawlInfo;import com.jbt.bean.ManagerInfo;import com.jbt.service.CrawlCarInfoService;import com.jbt.service.ManagerInfoService;import com.jbt.service.WarnInfoService;import com.jbt.util.GetHttpSessionConfigurator;import com.jbt.util.SessionUtil;		@ServerEndpoint(value="/crawlCarMsgSocket",configurator=GetHttpSessionConfigurator.class)	public class CrawlCarMsgSocket {	private Timer timer;	private String crawlName;	private int maxId;		//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识	//private static CopyOnWriteArraySet<WebSocketTest> webSocketSet = new CopyOnWriteArraySet<WebSocketTest>();	 	//与某个客户端的连接会话，需要通过它来给客户端发送数据	private Session session;	private HttpSession httpSession;	private String username;	  @OnMessage	  public void onMessage(String  message,Session session)	    throws IOException, InterruptedException {		  this.session = session;		  String[] s = message.split("&");		  crawlName = s[0];		  maxId = Integer.parseInt(s[1]);		  showAllCrawlCar();		  	  }	  public void showAllCrawlCar()	  {	  			timer = new Timer();			TimerTask task = new TimerTask() {				@Override				public void run() {					CrawlCarInfoService crawlCarInfoService = (CrawlCarInfoService) ContextLoader.getCurrentWebApplicationContext().getBean("CrawlCarInfoService");					ManagerInfoService managerInfoService = (ManagerInfoService) ContextLoader.getCurrentWebApplicationContext().getBean("ManagerInfoService");					WarnInfoService warnService = (WarnInfoService) ContextLoader.getCurrentWebApplicationContext().getBean("WarnInfoService");					ManagerInfo manager = managerInfoService.selectByName(username);					CrawlInfo crawlinfo = new CrawlInfo();					crawlinfo.setCrawlname(crawlName);					List<Map<?, ?>> carMsgInfoList = crawlCarInfoService.searchByCrawlWarnId(crawlinfo,manager.getId());					JSONArray jArray = null;					/*******************/					List<Map<?, ?>> crawlList = crawlCarInfoService							.searchCrawlByManager(crawlinfo, manager.getId());										List<Map<?, ?>> mapList = new ArrayList<Map<?, ?>>();					if (crawlinfo.getCrawlname() != null) {						if (!carMsgInfoList.isEmpty()) {							if (!crawlList.isEmpty()) {								for (int i = 0; i < carMsgInfoList.size(); i++) {									Map<String, Object> map = (Map<String, Object>) carMsgInfoList.get(i);									String[] s = map.get("crawlwarnId").toString()											.split(",");									StringBuilder sb = new StringBuilder();									for (int j = 0; j < crawlList.size(); j++) {																		List<String> tempList = Arrays.asList(s);																				if (tempList.contains(crawlList.get(j)												.get("id").toString())) {											if (j == crawlList.size() - 1)												sb.append(crawlList.get(j).get("id"));											else												sb.append(crawlList.get(j).get("id"))													.append(",");										}																			}									map.put("crawlwarnId", sb.toString());									mapList.add(map);								}							} else {								for (int i = 0; i < carMsgInfoList.size(); i++) {									Map<String, Object> map = (Map<String, Object>) carMsgInfoList.get(i);									map.put("crawlwarnId", "");									mapList.add(map);								}							}						}						jArray = JSONArray.fromObject(mapList);					} else						jArray = JSONArray.fromObject(carMsgInfoList);															/*************************/					List<Map<?, ?>> warnList = warnService.getMaxList(crawlinfo,manager.getId(),maxId);					int maxid = warnService.getMaxId(crawlinfo, manager.getId());					JSONObject jobj = new JSONObject();					jobj.put("carMsg", jArray);					jobj.put("warnMsg", JSONArray.fromObject(warnList));					jobj.put("maxId", maxid);					try {						session.getBasicRemote().sendText(jobj.toString());					} catch (IOException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}					}							};			timer.schedule(task, 0, 10000);// 10秒一次	  } 	  	  	   	  @OnOpen	  public void onOpen(Session session,EndpointConfig config) {	    System.out.println("Client connected");	    httpSession= (HttpSession) config.getUserProperties().get(HttpSession.class.getName());        username = (String) httpSession.getAttribute("username");	  }	 	  @OnClose	  public void onClose() {	    System.out.println("Connection closed");	    timer.cancel(); 	  }	}